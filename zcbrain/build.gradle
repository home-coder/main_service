apply plugin: 'com.android.application'
apply from: '../buildshell/android.gradle'

// 唤醒词、平台配置
def robot_ver = ""
def wakeup = ""
def nlu = "flytek"
// 配置文件路径
def config = project.property("mainservice.config")
if(project.hasProperty("mainservice.config") && file(config).exists()) {
    Properties props = new Properties()
    props.load(new FileInputStream(file(config)))
    robot_ver = props['robot_ver']
    wakeup = props['wakeup']
    nlu = props['nlu']
}

// 软件版本配置
def versionCodeApp = "1"
def versionNameApp = "1.0.0"
// 版本文件路径
def version = project.property("mainservice.version")
if(project.hasProperty("mainservice.version") && file(version).exists()) {
    Properties props = new Properties()
    props.load(new FileInputStream(file(version)))
    versionCodeApp = props[wakeup + 'versionCode']
    versionNameApp = props[wakeup + 'versionName']
    if(null == versionCodeApp){
        versionCodeApp = props['xiaoyongversionCode']
    }
    if(null == versionNameApp){
        versionNameApp = props['xiaoyongversionName']
    }
}


android {

    sourceSets.main {

        res.srcDirs = ["src/main/res"]

        if(file(".\\src\\main\\ext_res\\" + wakeup + "\\res").exists()){
            res.srcDirs += ['src/main/ext_res/'+ wakeup + '/res']
        }else {
            res.srcDirs += ['src/main/ext_res/xiaoyong/res']
        }

        if(file(".\\src\\main\\ext_res\\" + wakeup + "\\res_values").exists()){
            res.srcDirs += ['src/main/ext_res/'+ wakeup + '/res_values']
        }else {
            res.srcDirs += ['src/main/ext_res/xiaoyong/res_values']
        }

        if(file(".\\src\\main\\ext_src\\" + wakeup + "\\java").exists()){
            java.srcDirs = ["src/main/java", 'src/main/ext_src/'+ wakeup + '/java']
        }else {
            java.srcDirs = ["src/main/java", 'src/main/ext_src/xiaoyong/java']
        }

        if(file(".\\src\\main\\ext_nlu_src\\" + nlu + "\\java").exists()){
            java.srcDirs += ['src/main/ext_nlu_src/'+ nlu + '/java']
        }

        /*
        if(file(".\\src\\main\\ext_resources\\" + wakeup + "\\resources").exists()){
            resources.srcDirs = ['src/main/resources/', 'src/main/ext_resources/'+ wakeup + '/resources']
        }else {
            resources.srcDirs = ['src/main/resources/', 'src/main/ext_resources/xiaoyong/resources']
        }
        */

        if(file("..\\buildconfig\\mainservice\\ext_resources\\" + wakeup + "\\" + robot_ver).exists()){
            resources.srcDirs = ['src/main/resources/', '../buildconfig/mainservice/ext_resources/' + wakeup + '/' + robot_ver]
        }
        else if(file("..\\buildconfig\\mainservice\\ext_resources\\" + wakeup + "\\resources").exists()){
            resources.srcDirs = ['src/main/resources/', '../buildconfig/mainservice/ext_resources/'+ wakeup + '/resources']
        }
        else {
            resources.srcDirs = ['src/main/resources/', '../buildconfig/mainservice/ext_resources/xiaoyong/resources']
        }
    }

    defaultConfig {
        applicationId "com.zccl.ruiqianqi.brain"
        testApplicationId "com.zccl.ruiqianqi.brain.test"
        versionCode 1
        versionName "1.0.0"
    }

    // 这个是选择配置，而不是编译配置
    productFlavors {

        P_armv7 {
            applicationId 'com.yongyida.robot.voice'
            versionCode Integer.parseInt(versionCodeApp)
            versionName versionNameApp
        }

        P_armall {
            applicationId 'com.yongyida.robot.voice'
            versionCode Integer.parseInt(versionCodeApp)
            versionName versionNameApp
        }

        /*
        "${wakeup}" {
            applicationId 'com.yongyida.robot.voice'
            ndk {
                abiFilters "armeabi-v7a"
            }
            versionCode Integer.parseInt(versionCodeApp)
            versionName versionNameApp
        }
        */

    }

    sourceSets.P_armv7 {
        if(file("src/main/ext_src/${wakeup}/AndroidManifest.xml").exists()){
            manifest.srcFile "src/main/ext_src/${wakeup}/AndroidManifest.xml"
        }else if(file("src/main/ext_nlu_src/${nlu}/AndroidManifest.xml").exists()){
            manifest.srcFile "src/main/ext_nlu_src/${nlu}/AndroidManifest.xml"
        }
    }

    sourceSets.P_armall {
        if(file("src/main/ext_src/${wakeup}/AndroidManifest.xml").exists()){
            manifest.srcFile "src/main/ext_src/${wakeup}/AndroidManifest.xml"
        }else if(file("src/main/ext_nlu_src/${nlu}/AndroidManifest.xml").exists()){
            manifest.srcFile "src/main/ext_nlu_src/${nlu}/AndroidManifest.xml"
        }
    }
}

// 主要是使用android.os.SystemProperties
def getLayoutLibPath() {
    return "${android.getSdkDirectory().getAbsolutePath()}" + "/platforms/" +
            android.compileSdkVersion + "/data/layoutlib.jar"
}

dependencies {

    provided files(getLayoutLibPath())
    compile fileTree(include: ['*.jar'], dir: 'src/main/libs')

    def presentationTest = rootProject.ext.presentationTest
    testCompile presentationTest.junit

    androidTestCompile presentationTest.mockito
    androidTestCompile presentationTest.dexmaker
    androidTestCompile presentationTest.dexmakerMockito
    androidTestCompile (presentationTest.espresso, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestCompile presentationTest.testingSupportLib

    def presentationDepend = rootProject.ext.presentationDepend
    compile presentationDepend.butterknife
    annotationProcessor      presentationDepend.butterknifeApt
    compile presentationDepend.dbflow
    compile presentationDepend.dbflowCore
    annotationProcessor      presentationDepend.dbflowApt

    def developmentDepend = rootProject.ext.developmentDepend
    debugCompile        developmentDepend.leakcanary
    releaseCompile      developmentDepend.leakcanaryNoop
    mtk_testkeyCompile  developmentDepend.leakcanaryNoop
    rk_platformCompile  developmentDepend.leakcanaryNoop

    compile project(':flytek')
    //compile project(':googlespeech')
    compile project(':drive')
    compile project(':socket')
    compile project(':zcui')

}

/*
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def outputFile = output.outputFile
        if (outputFile != null && outputFile.name.endsWith('.apk')) {
            def fileName = outputFile.name;
            output.outputFile = new File(".", fileName)
            println "输出文件位置： " + output.outputFile
        }
    }
}*/