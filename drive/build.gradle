apply plugin: 'com.android.library'
apply from: '../buildshell/library.gradle'

def platform = ""
def robot_ver = ""
if(project.hasProperty("config") && file(project.property("config")).exists()) {
    Properties props = new Properties()
    props.load(new FileInputStream(file(project.property("config"))))
    platform = props['platform']
    robot_ver = props['robot_ver']
}

android{
    sourceSets.main {
        //aidl.srcDirs = ['src/main/aidl']
        java.srcDirs = ["src/main/java",
                        "src/main/ext_src/" + platform + "/" + robot_ver + "/control/java",
                        "src/main/ext_src/" + platform + "/" +  robot_ver + "/move/java"]
        res.srcDir "src/main/res"
        //disable automatic ndk-build call
        jni.srcDirs = []
        jniLibs.srcDirs = ['src/main/libs',
                           'src/main/ext_src/' + platform + "/" + robot_ver + '/control/libs',
                           'src/main/ext_src/' + platform + "/" + robot_ver + '/move/libs']
        manifest.srcFile "src/main/AndroidManifest.xml"
        assets.srcDir "src/main/assets"
        resources.srcDirs = ['src/main/resources/']
    }
}

def getLayoutLibPath() {
    return "${android.getSdkDirectory().getAbsolutePath()}" + "/platforms/" +
            android.compileSdkVersion + "/data/layoutlib.jar"
}

//compile 'group:module:version'
dependencies {
    provided files(getLayoutLibPath())
    compile fileTree(include: ['*.jar'], dir: 'src/main/libs')
    compile fileTree(dir: "src/main/ext_src/" + platform + "/" + robot_ver + "/control/libs", include: ['*.jar'])
    compile fileTree(dir: "src/main/ext_src/" + platform + "/" + robot_ver + "/move/libs", include: ['*.jar'])

    def presentationTest = rootProject.ext.presentationTest
    androidTestCompile(presentationTest.espresso, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    def dataTest = rootProject.ext.dataTest
    testCompile dataTest.junit

    def publicDepend = rootProject.ext.publicDepend
    compile publicDepend.support
    compile publicDepend.appcompat

}
