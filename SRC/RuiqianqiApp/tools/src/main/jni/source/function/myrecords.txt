I line：这行包含身份信息，显示了 bus type是 3 (usb)， vendor， product， version等信息。
N line：这行包含了名字信息。
P line：这行包含了物理设备信息。
H line: 这行包含了与设备关联的 handler drivers。
B line: 这些行包含了显示设备能力的一些位域 (bitfield)。

位域的说明：

触摸设备的位域
ABS=2658000 11000003
#define ABS_MAX         0x3f
下面共有3F个事件，就是64个事件，怎么知道设备支不支持呢，这就是ABS=int int的原因：刚好64位，一个位代表一个支持事件
（第一个）3f 3e 3d 3c 3b 3a 39 38, 37 36 35 34 33 32 31 30, 2f 2e 2d 2c 2b 2a 29 28, 27 26 25 24 23 22 21 20 
（第二个）1f 1e 1d 1c 1b 1a 19 18, 17 16 15 14 13 12 11 10,  f  e  d  c  b  a  9  8,  7  6  5  4  3  2  1  0 
触摸屏的CODE:
【0x0开头的支持16个CODE】
#define ABS_X           0x00
#define ABS_Y           0x01
#define ABS_Z           0x02
#define ABS_RX          0x03
#define ABS_RY          0x04
#define ABS_RZ          0x05
#define ABS_THROTTLE    0x06
#define ABS_RUDDER      0x07
#define ABS_WHEEL       0x08
#define ABS_GAS         0x09
#define ABS_BRAKE       0x0a
【0x1开头的支持16个CODE】
#define ABS_HAT0X       0x10
#define ABS_HAT0Y       0x11
#define ABS_HAT1X       0x12
#define ABS_HAT1Y       0x13
#define ABS_HAT2X       0x14
#define ABS_HAT2Y       0x15
#define ABS_HAT3X       0x16
#define ABS_HAT3Y       0x17
#define ABS_PRESSURE    0x18
#define ABS_DISTANCE    0x19
#define ABS_TILT_X      0x1a
#define ABS_TILT_Y      0x1b
#define ABS_TOOL_WIDTH  0x1c
【0x2开头的支持16个CODE】
#define ABS_VOLUME      0x20
#define ABS_MISC        0x28
#define ABS_MT_SLOT  		0x2F ------------- B协议
【0x3开头的支持16个CODE】
#define ABS_MT_TOUCH_MAJOR  0x30   
#define ABS_MT_TOUCH_MINOR  0x31   
#define ABS_MT_WIDTH_MAJOR  0x32  
#define ABS_MT_WIDTH_MINOR  0x33  
#define ABS_MT_ORIENTATION  0x34   
#define ABS_MT_POSITION_X   0x35 ------------- 监听
#define ABS_MT_POSITION_Y   0x36 ------------- 监听
#define ABS_MT_TOOL_TYPE    0x37   
#define ABS_MT_BLOB_ID      0x38  
#define ABS_MT_TRACKING_ID  0x39   
#define ABS_MT_PRESSURE     0x3a   
#define ABS_MT_DISTANCE     0x3b 
#define ABS_MAX         	0x3f
#define ABS_CNT         	(ABS_MAX+1)
【一共就是64个CODE】


按键的位域
KEY=8 400 0 0 100000b8 2100000 1000 40000800 1c1ec0 0 78400400 10000ffc
#define KEY_MAX 0x1ff 具体的Key codes. 参见<linux/input.h>
也就是一共有512个事件，512/16=32 也就是要用【32个short型】或【16个整数】来表达，同样一个Int标志32个事件是否支持
其中：
【0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10】
【0xf,  0xe,  0xd,  0xc,  0xb,  0xa,  0x9,  0x8,  0x7,  0x6,  0x5,  0x4,  0x3,  0x2,  0x1,  0x0】
这个从右边开始0，1，2，3，4，5，6，7，8，9，10，11，12，13......有可能后面的没有

#define KEY_VOLUMEDOWN 114 0x72  -------------- 监听
#define KEY_VOLUMEUP   115 0x73  -------------- 监听
#define KEY_POWER      116 0x74  -------------- 监听
#define BTN_TOUCH      330 0x14a -------------- A协议
[0x14]在第10个int中表示【从右往左，从0开始】，a表示第a位置1，结果就是0400




****************************************************************************************************
LTE: cat /proc/bus/input/devices
I: Bus=0000 Vendor=0000 Product=0000 Version=0000
N: Name="hall_sensor"
P: Phys=
S: Sysfs=/devices/virtual/input/input0
U: Uniq=
H: Handlers=event0 cpufreq
B: PROP=0
B: EV=21
B: SW=1

I: Bus=0000 Vendor=0000 Product=0000 Version=0000
N: Name="fpc1080"
P: Phys=
S: Sysfs=/devices/virtual/input/input1
U: Uniq=
H: Handlers=mouse0 event1 cpufreq
B: PROP=0
B: EV=7
B: KEY=10000 8000000 0 0 0 0 0 0 10000000
B: REL=3

I: Bus=0000 Vendor=0000 Product=0000 Version=0000
N: Name="fpc1080Mouse"
P: Phys=
S: Sysfs=/devices/virtual/input/input2
U: Uniq=
H: Handlers=mouse1 event2 cpufreq
B: PROP=0
B: EV=7
B: KEY=30000 0 0 0 0 0 0 0 0
B: REL=103

I: Bus=0000 Vendor=0000 Product=0000 Version=0000
N: Name="fpc1080TouchPad"
P: Phys=
S: Sysfs=/devices/virtual/input/input3
U: Uniq=
H: Handlers=mouse2 event3 cpufreq
B: PROP=0
B: EV=b
B: KEY=400 0 0 0 0 0 0 0 0 0 0
B: ABS=7

I: Bus=0000 Vendor=0000 Product=0000 Version=0000
N: Name="qpnp_pon"
P: Phys=qpnp_pon/input0
S: Sysfs=/devices/virtual/input/input4
U: Uniq=
H: Handlers=event4 keychord cpufreq
B: PROP=0
B: EV=3
B: KEY=140000 0 0 0

《0019》好像是按键类型，知道这个就行了
I: Bus=0019 Vendor=0001 Product=0001 Version=0100
N: Name="gpio-keys"
P: Phys=gpio-keys/input0
S: Sysfs=/devices/gpio_keys.70/input/input5
U: Uniq=
H: Handlers=event5 keychord cpufreq
B: PROP=0
B: EV=3
B: KEY=40000000 0 0 0 0 0 0 10000 0 0 0 0 0 0 0 0 8000000 0 0 0 c0000 0 0 0

I: Bus=0000 Vendor=0000 Product=0000 Version=0000
N: Name="bms_app"
P: Phys=
S: Sysfs=/devices/virtual/input/input6
U: Uniq=
H: Handlers=event6 cpufreq
B: PROP=0
B: EV=5
B: REL=39

I: Bus=0000 Vendor=0000 Product=0000 Version=0000
N: Name="atmel_mxt_540s"
P: Phys=
S: Sysfs=/devices/virtual/input/input7
U: Uniq=
H: Handlers=mouse3 event7 keychord cpufreq
B: PROP=2
B: EV=b
B: KEY=8 400 0 0 100000b8 2100000 1000 40000800 1c1ec0 0 78400400 10000ffc
B: ABS=2658000 11000003

I: Bus=0000 Vendor=0000 Product=0000 Version=0000
N: Name="msm8974-taiko-mtp-snd-card Button Jack"
P: Phys=ALSA
S: Sysfs=/devices/sound.30/sound/card0/input8
U: Uniq=
H: Handlers=event8 cpufreq
B: PROP=0
B: EV=3
B: KEY=ff 0 0 0 0 0 0 0 0

I: Bus=0000 Vendor=0000 Product=0000 Version=0000
N: Name="msm8974-taiko-mtp-snd-card Headset Jack"
P: Phys=ALSA
S: Sysfs=/devices/sound.30/sound/card0/input9
U: Uniq=
H: Handlers=event9 cpufreq
B: PROP=0
B: EV=21
B: SW=1c054

*********************************************************************************************
 POLLIN
 有数据可读。
 
 POLLRDNORM
 有普通数据可读。
 
 POLLRDBAND
 有优先数据可读。
 
 POLLPRI
 有紧迫数据可读。
 
 POLLIN等价于POLLRDNORM | POLLRDBAND；
 POLLOUT 等价于POLLWRNORM；
 
 POLLIN | POLLRDPRI 等价于select的读；
 POLLOUT | POLLWRBAND 等价于select的写；
 
 
 
 ***********************************************************************************************
 input keyevent
如果想模拟按键，send event用起来比较繁琐，可以用input keyevent代替

下面是input keyevent几个比较常用的用法：
input keyevent 3   //Home
input keyevent 4   //Back
input keyevent 19  //Up
input keyevent 20  //Down
input keyevent 21  //Left
input keyevent 22  //Right
input keyevent 23  //Select/Ok
input keyevent 24  //Volume+
input keyevent 25  //Volume-
input keyevent 82  //Menu 菜单


用sendevent 模拟触屏事件
sendevent /dev/input/event1: 0003 0000 0000015e   // ABS x 坐标
sendevent /dev/input/event1: 0003 0001 000000df   // ABS y 坐标
sendevent /dev/input/event1: 0001 014a 00000001   // BTN touch事件 值为1
sendevent /dev/input/event1: 0003 0018 00000000   // ABS pressure事件
sendevent /dev/input/event1: 0001 014a 00000000   // BTN touch事件 值为0
sendevent /dev/input/event1: 0000 0000 00000000   // sync事件
 
 