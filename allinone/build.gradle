apply plugin: 'com.android.library'
apply from: '../buildshell/library.gradle'
//apply from: '../buildshell/ndk.gradle'

def mic_ver = ""
def app_id = ""
def platform = ""
def wakeup = ""
def use_aiui_libs = "yes"
def mic_test = "yes"

if(project.hasProperty("mainservice.config")){
    // ≈‰÷√Œƒº˛¬∑æ∂
    def config = project.property("mainservice.config");
    if(file(config).exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream(file(config)))
        mic_ver = props['mic_ver']
        app_id = props['app_id']
        platform = props['platform']
        wakeup = props['wakeup']
        use_aiui_libs = props['use_aiui_libs']
        mic_test = props['mic_test']
    }
}

android{
    sourceSets.main {
        aidl.srcDirs = ['src/main/aidl']

        java.srcDirs = ["src/main/java",
                        "src/main/" + mic_ver + "/"+ platform + "/java",
                        "src/main/ext_alsa/"+ platform + "/java"]

        assets.srcDirs = ["src/main/assets",
                          "src/main/"+ mic_ver + "/wakeup/" + wakeup + "/" + "assets"]

        jniLibs.srcDirs = ['src/main/libs',
                           'src/main/' + mic_ver + '/'+ platform + '/libs']

        res.srcDirs = ["src/main/res", "src/main/" + mic_ver + "/"+ platform + "/res"]
        //disable automatic ndk-build call
        jni.srcDirs = []
        manifest.srcFile "src/main/AndroidManifest.xml"
        resources.srcDirs = ['src/main/resources/']

        if("yes" == use_aiui_libs){
            jniLibs.srcDirs += [ 'src/main/ext_libs_appid/'+ app_id + '/libsaiui']
        }else {
            jniLibs.srcDirs += [ 'src/main/ext_libs_appid/'+ app_id + '/libs']
        }

        if("yes" == mic_test){
            java.srcDirs += ["src/main/ext_mictest/java"]
            jniLibs.srcDirs += [ 'src/main/ext_mictest/libs']
            manifest.srcFile "src/main/ext_mictest/AndroidManifest.xml"
        }

    }
}

def getLayoutLibPath() {
    return "${android.getSdkDirectory().getAbsolutePath()}" + "/platforms/" +
            android.compileSdkVersion + "/data/layoutlib.jar"
}

//compile 'group:module:version'
dependencies {
    provided files(getLayoutLibPath())
    compile fileTree(include: ['*.jar'], dir: 'src/main/libs')
    compile fileTree(dir: "src/main/" + mic_ver + "/" + platform + "/libs", include: ['*.jar'])
    if("yes" == use_aiui_libs){
        compile fileTree(dir: "src/main/ext_libs_appid/" + app_id + "/libsaiui", include: ['*.jar'])
    }else{
        compile fileTree(dir: "src/main/ext_libs_appid/" + app_id + "/libs", include: ['*.jar'])
    }


    def presentationTest = rootProject.ext.presentationTest
    androidTestCompile(presentationTest.espresso, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    def dataTest = rootProject.ext.dataTest
    testCompile dataTest.junit

    def publicDepend = rootProject.ext.publicDepend
    compile publicDepend.support
    compile publicDepend.appcompat
    compile publicDepend.eventbus
    annotationProcessor     publicDepend.eventbusApt

    compile project(':tools')
    compile project(':drive')
    compile project(':plugin')
}
